{"version":3,"sources":["components/Navbar.js","components/Textfunctions.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","type","id","style","height","width","borderRadius","cursor","backgroundColor","onClick","toggleMode","Textfunctions","useState","text","setText","console","log","color","rows","onChange","event","target","value","disabled","length","toLowerCase","showalert","toUpperCase","replace","l","newtext","split","join","navigator","clipboard","writeText","filter","element","Alert","word","alert","role","charAt","slice","message","App","darkmode","setDarkMode","setAlert","setTimeout","name","document","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"uKAEe,SAASA,EAAOC,GAI3B,OACI,8BACI,qBAAKC,UAAS,yCAAmD,UAAfD,EAAME,KAAmB,QAAU,OAAvE,eAAmG,UAAfF,EAAME,KAAmB,OAAS,SAApI,SACI,sBAAKD,UAAU,kBAAf,UACI,mBAAGA,UAAU,eAAeE,KAAK,IAAjC,uBACA,wBAAQF,UAAU,iBAAiBG,KAAK,SAAS,iBAAe,WAAW,iBAAe,0BAA0B,gBAAc,yBAAyB,gBAAc,QAAQ,aAAW,oBAA5L,SACI,sBAAMH,UAAU,0BAEpB,sBAAKA,UAAU,2BAA2BI,GAAG,yBAA7C,UACI,qBAAIJ,UAAU,kCAAd,UACI,oBAAIA,UAAU,WAAd,SACI,mBAAGA,UAAU,kBAAkB,eAAa,OAAOE,KAAK,IAAxD,oBAEJ,oBAAIF,UAAU,WAAd,SACI,mBAAGA,UAAU,WAAWE,KAAK,IAA7B,wBAGR,sBAAKF,UAAU,cAAf,UACI,qBAAKA,UAAU,OAAOK,MAAO,CAAEC,OAAQ,OAAQC,MAAO,OAAQC,aAAc,MAAOC,OAAQ,UAAWC,gBAAiB,SAAWC,QAAS,kBAAMZ,EAAMa,WAAW,YADtK,gBAIA,sBAAKZ,UAAU,cAAf,UACI,qBAAKA,UAAU,iBAAiBK,MAAO,CAAEC,OAAQ,OAAQC,MAAO,OAAQC,aAAc,MAAOC,OAAQ,WAAaE,QAAS,kBAAMZ,EAAMa,WAAW,aADtJ,cAIA,sBAAKZ,UAAU,cAAf,UACI,qBAAKA,UAAU,kBAAkBK,MAAO,CAAEC,OAAQ,OAAQC,MAAO,OAAQC,aAAc,MAAOC,OAAQ,WAAaE,QAAS,kBAAMZ,EAAMa,WAAW,cADvJ,gBAIA,sBAAKZ,UAAU,cAAf,UACI,qBAAKA,UAAU,OAAOK,MAAO,CAAEC,OAAQ,OAAQC,MAAO,OAAQC,aAAc,MAAOC,OAAQ,UAAWC,gBAAiB,SAAWC,QAAS,kBAAMZ,EAAMa,WAAW,WADtK,yBCjCT,SAASC,EAAcd,GAClC,IAmCA,EAAwBe,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAEA,OACI,gCACI,sBAAKhB,UAAU,iBAAf,UACI,iDACCiB,QAAQC,IAAInB,EAAME,MACnB,0BAAUI,MAAO,CAAEc,MAAsB,UAAfpB,EAAME,KAAmB,QAAU,SAAWD,UAAS,0BAAqBD,EAAME,KAA3B,kBAAiDG,GAAG,sBAAsBgB,KAAK,KAAKC,SA1C5J,SAACC,GAClBN,EAAQM,EAAMC,OAAOC,QAyCgLA,MAAOT,OAExM,sBAAKf,UAAU,YAAf,UACI,wBAAQyB,SAA0B,IAAhBV,EAAKW,OAA6B1B,UAAS,kBAA4B,UAAfD,EAAME,KAAmB,UAAYF,EAAME,KAAxD,QAAoEU,QApCvH,WAClBK,EAAQD,EAAKY,eACb5B,EAAM6B,UAAU,wBAAyB,YAkCjC,0BACA,wBAAQH,SAA0B,IAAhBV,EAAKW,OAA6B1B,UAAS,kBAA4B,UAAfD,EAAME,KAAmB,UAAYF,EAAME,KAAxD,QAAoEU,QAzCvH,WAClBK,EAAQD,EAAKc,eACb9B,EAAM6B,UAAU,wBAAyB,YAuCjC,0BACA,wBAAQH,SAA0B,IAAhBV,EAAKW,OAA6B1B,UAAS,kBAA4B,UAAfD,EAAME,KAAmB,UAAYF,EAAME,KAAxD,QAAoEU,QA1B/G,WAC1BK,EAAQD,EAAKY,cAAcG,QAAQ,SAAS,SAAAC,GAAC,OAAIA,EAAEF,kBACnD9B,EAAM6B,UAAU,gCAAiC,YAwBzC,8BACA,wBAAQH,SAA0B,IAAhBV,EAAKW,OAA6B1B,UAAS,kBAA4B,UAAfD,EAAME,KAAmB,UAAYF,EAAME,KAAxD,QAAoEU,QAlBpH,WACrB,IAAIqB,EAAUjB,EAAKkB,MAAM,QACzBjB,EAAQgB,EAAQE,KAAK,MACrBnC,EAAM6B,UAAU,2BAA4B,YAepC,gCACA,wBAAQH,SAA0B,IAAhBV,EAAKW,OAA6B1B,UAAS,kBAA4B,UAAfD,EAAME,KAAmB,UAAYF,EAAME,KAAxD,QAAoEU,QAnCrH,WAGpBwB,UAAUC,UAAUC,UAAUtB,GAC9BhB,EAAM6B,UAAU,oBAAqB,YA+B7B,kBACA,wBAAQH,SAA0B,IAAhBV,EAAKW,OAA6B1B,UAAS,kBAA4B,UAAfD,EAAME,KAAmB,UAAYF,EAAME,KAAxD,QAAoEU,QAzBpH,WACrBK,EAAQ,IACRjB,EAAM6B,UAAU,gBAAiB,YAuBzB,sBAEJ,sBAAK5B,UAAU,iBAAf,UACI,mDACA,mDAAsBe,EAAKkB,MAAM,OAAOK,QAAO,SAACC,GAAc,OAA0B,IAAnBA,EAAQb,UAAgBA,OAA7F,8BAAgIX,EAAKW,UACrI,8BAAI,KAAQX,EAAKkB,MAAM,OAAOK,QAAO,SAACC,GAAc,OAA0B,IAAnBA,EAAQb,UAAgBA,OAAnF,mBACA,yCACA,4BAAoB,IAAhBX,EAAKW,OAAe,6BAA+BX,UC1DxD,SAASyB,EAAMzC,GAC1B,IAAoB0C,EAIpB,OAEI,qBAAKpC,MAAO,CAAEC,OAAQ,QAAtB,SACKP,EAAM2C,OAAS,sBAAK1C,UAAS,sBAAiBD,EAAM2C,MAAMvC,MAAQwC,KAAK,QAAxD,UACZ,oCARQF,EAQY1C,EAAM2C,MAAMvC,KAPjCsC,EAAKG,OAAO,GAAGf,cAAgBY,EAAKI,MAAM,GAAGlB,eAO5C,OADY,IACsC5B,EAAM2C,MAAMI,aCgD/DC,MAtDf,WACE,MAAgCjC,mBAAS,SAAzC,mBAAOkC,EAAP,KAAiBC,EAAjB,KACA,EAA0BnC,mBAAS,MAAnC,mBAAO4B,EAAP,KAAcQ,EAAd,KAiCMtB,EAAY,SAACkB,EAAS3C,GAC1B+C,EAAS,CACPJ,QAASA,EACT3C,KAAMA,IAERgD,YAAW,WACTD,EAAS,QACR,OAGL,OACE,qCACE,cAACpD,EAAD,CAAQc,WA5CO,SAACwC,GACL,UAATA,GACFH,EAAY,SACZI,SAASC,KAAKjD,MAAMK,gBAAkB,QACtC2C,SAASC,KAAKjD,MAAMc,MAAQ,QAS5BS,EAAU,qBAAsB,aAEnB,SAATwB,GACFC,SAASC,KAAKjD,MAAMK,gBAAkB,UACtCuC,EAAY,QACZrB,EAAU,oBAAqB,YACb,YAATwB,GACTC,SAASC,KAAKjD,MAAMK,gBAAkB,UACtCuC,EAAY,WACZrB,EAAU,qBAAsB,aAEhCqB,EAAY,UACZI,SAASC,KAAKjD,MAAMK,gBAAkB,UACtCkB,EAAU,mBAAoB,YAEhCyB,SAASC,KAAKjD,MAAMc,MAAQ,UAgBIlB,KAAM+C,IACtC,cAACR,EAAD,CAAOE,MAAOA,IACd,cAAC7B,EAAD,CAAeZ,KAAM+C,EAAUpB,UAAWA,QC1CjC2B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFb,SAASc,eAAe,SAM1BZ,K","file":"static/js/main.4412b7b0.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Navbar(props) {\r\n    // const handletoggle = (name) => {\r\n    //     console.log('hello');\r\n    // }\r\n    return (\r\n        <div>\r\n            <nav className={`navbar navbar-expand-lg navbar-${props.mode === 'light' ? 'light' : 'dark'} bg-${props.mode !== 'light' ? 'dark' : 'light'}`}>\r\n                <div className=\"container-fluid\">\r\n                    <a className=\"navbar-brand\" href=\"#\">TextUtils</a>\r\n                    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                        <span className=\"navbar-toggler-icon\"></span>\r\n                    </button>\r\n                    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                        <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                            <li className=\"nav-item\">\r\n                                <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n                            </li>\r\n                            <li className=\"nav-item\">\r\n                                <a className=\"nav-link\" href=\"#\">About</a>\r\n                            </li>\r\n                        </ul>\r\n                        <div className=\"mx-2 d-flex\">\r\n                            <div className=\"me-1\" style={{ height: '20px', width: '30px', borderRadius: '30%', cursor: 'pointer', backgroundColor: 'white' }} onClick={() => props.toggleMode('light')}></div>\r\n                            Light mode\r\n                        </div>\r\n                        <div className=\"mx-2 d-flex\">\r\n                            <div className=\"bg-danger me-1\" style={{ height: '20px', width: '30px', borderRadius: '30%', cursor: 'pointer' }} onClick={() => props.toggleMode('danger')}></div>\r\n                            Red Mode\r\n                        </div>\r\n                        <div className=\"mx-2 d-flex\">\r\n                            <div className=\"bg-success me-1\" style={{ height: '20px', width: '30px', borderRadius: '30%', cursor: 'pointer' }} onClick={() => props.toggleMode('success')}></div>\r\n                            Green Mode\r\n                        </div>\r\n                        <div className=\"mx-2 d-flex\">\r\n                            <div className=\"me-1\" style={{ height: '20px', width: '30px', borderRadius: '30%', cursor: 'pointer', backgroundColor: 'black' }} onClick={() => props.toggleMode('info')}></div>\r\n                            Dark Mode\r\n                        </div>\r\n\r\n                        {/* <form className=\"d-flex\">\r\n\r\n                            <div className=\"form-check form-switch\">\r\n                                <input className=\"form-check-input\" type=\"checkbox\" id=\"flexSwitchCheckDefault\" onClick={() => props.toggleMode('light')} />\r\n                                <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Light Mode</label>\r\n                            </div>\r\n                            <div className=\"form-check form-switch\">\r\n                                <input className=\"form-check-input\" type=\"checkbox\" id=\"flexSwitchCheckDefault\" onClick={() => props.toggleMode('danger')} />\r\n                                <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Red Mode</label>\r\n                            </div>\r\n                            <div className=\"form-check form-switch ms-2\">\r\n                                <input className=\"form-check-input\" type=\"checkbox\" id=\"flexSwitchCheckDefault\" onClick={() => props.toggleMode('success')} />\r\n                                <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Green Mode</label>\r\n                            </div>\r\n                            <div className=\"form-check form-switch ms-2\">\r\n                                <input className=\"form-check-input\" type=\"checkbox\" id=\"flexSwitchCheckDefault\" onClick={() => props.toggleMode('info')} />\r\n                                <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Dark Mode</label>\r\n                            </div>\r\n                             <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n                            <button className=\"btn btn-primary\" type=\"submit\">Search</button> \r\n                        </form> */}\r\n                    </div>\r\n                </div>\r\n            </nav>\r\n        </div >\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\n\r\nexport default function Textfunctions(props) {\r\n    const handleChange = (event) => {\r\n        setText(event.target.value);\r\n        // console.log(text);\r\n    }\r\n\r\n    const handleUpClick = () => {\r\n        setText(text.toUpperCase());\r\n        props.showalert(\"Convert to Upper Case\", \"success\")\r\n    }\r\n    const handleLoClick = () => {\r\n        setText(text.toLowerCase());\r\n        props.showalert(\"Convert to Lower Case\", \"success\")\r\n    }\r\n\r\n    const handleCopyClick = () => {\r\n        //     var copyText = document.getElementById(\"FormControlTextarea\");\r\n        //     navigator.clipboard.writeText(copyText.value);\r\n        navigator.clipboard.writeText(text);\r\n        props.showalert(\"Copy to Clipboard\", \"success\")\r\n    }\r\n\r\n    const handleCapitalizeClick = () => {\r\n        setText(text.toLowerCase().replace(/\\b\\w/g, l => l.toUpperCase()));\r\n        props.showalert(\"Convert to Capitalize Letters\", \"success\")\r\n    }\r\n    const handleClearClick = () => {\r\n        setText(\"\");\r\n        props.showalert(\"Text is Clear\", \"success\")\r\n    }\r\n\r\n    const handleExtraspace = () => {\r\n        let newtext = text.split(/[ ]+/);\r\n        setText(newtext.join(\" \"));\r\n        props.showalert(\"Extra spaces are removed\", \"success\")\r\n    }\r\n    const [text, setText] = useState(\"\");\r\n\r\n    return (\r\n        <div >\r\n            <div className=\"my-4 container\">\r\n                <h1>Enter Text Here</h1>\r\n                {console.log(props.mode)}\r\n                <textarea style={{ color: props.mode === 'light' ? 'black' : 'white' }} className={`form-control bg-${props.mode} bg-opacity-50`} id=\"FormControlTextarea\" rows=\"10\" onChange={handleChange} value={text}></textarea>\r\n            </div>\r\n            <div className=\"container\">\r\n                <button disabled={text.length === 0 ? true : false} className={`btn btn-${props.mode === 'light' ? 'primary' : props.mode} m-2`} onClick={handleLoClick}>To LowerCase</button>\r\n                <button disabled={text.length === 0 ? true : false} className={`btn btn-${props.mode === 'light' ? 'primary' : props.mode} m-2`} onClick={handleUpClick}>To UpperCase</button>\r\n                <button disabled={text.length === 0 ? true : false} className={`btn btn-${props.mode === 'light' ? 'primary' : props.mode} m-2`} onClick={handleCapitalizeClick}>Capitalize words</button>\r\n                <button disabled={text.length === 0 ? true : false} className={`btn btn-${props.mode === 'light' ? 'primary' : props.mode} m-2`} onClick={handleExtraspace}>Remove Extra Space</button>\r\n                <button disabled={text.length === 0 ? true : false} className={`btn btn-${props.mode === 'light' ? 'primary' : props.mode} m-2`} onClick={handleCopyClick}>Copy</button>\r\n                <button disabled={text.length === 0 ? true : false} className={`btn btn-${props.mode === 'light' ? 'primary' : props.mode} m-2`} onClick={handleClearClick}>Clear</button>\r\n            </div>\r\n            <div className=\"container my-3\">\r\n                <h2>Your Text Summary</h2>\r\n                <p>Number of words : {text.split(/\\s+/).filter((element) => { return element.length !== 0 }).length} and Number of characters: {text.length}</p>\r\n                <p>{0.008 * text.split(/\\s+/).filter((element) => { return element.length !== 0 }).length} Minutes read</p>\r\n                <h2>Preview</h2>\r\n                <p>{text.length === 0 ? \"Enter text to preview here\" : text}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const capatalize = (word) => {\r\n        return word.charAt(0).toUpperCase() + word.slice(1).toLowerCase();\r\n    }\r\n\r\n    return (\r\n\r\n        <div style={{ height: '50px' }}>\r\n            {props.alert && <div className={`alert alert-${props.alert.type}`} role=\"alert\">\r\n                <strong>{capatalize(props.alert.type)}:</strong> {props.alert.message}\r\n            </div>}\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\nimport Navbar from './components/Navbar';\nimport Textfunctions from './components/Textfunctions';\nimport Alert from './components/Alert';\n\nfunction App() {\n  const [darkmode, setDarkMode] = useState('light');\n  const [alert, setAlert] = useState(null);\n  const toggleMode = (name) => {\n    if (name === 'light') {\n      setDarkMode('light');\n      document.body.style.backgroundColor = \"white\";\n      document.body.style.color = \"black\"\n      // how to change titles\n      // document.title = \"TextUtils - Light Mode\"\n      // setInterval(() => {\n      //   document.title = 'TextUtils is Amazing Mode';\n      // }, 2000);\n      // setInterval(() => {\n      //   document.title = 'Install TextUtils Now';\n      // }, 1500);\n      showalert(\"Light mode enabled\", \"success\");\n    } else {\n      if (name === 'info') {\n        document.body.style.backgroundColor = \"#171238\";\n        setDarkMode('info');\n        showalert(\"Dark mode enabled\", \"success\");\n      } else if (name === 'success') {\n        document.body.style.backgroundColor = \"#104516\";\n        setDarkMode('success');\n        showalert(\"Green mode enabled\", \"success\");\n      } else {\n        setDarkMode('danger');\n        document.body.style.backgroundColor = \"#762020\";\n        showalert(\"Red mode enabled\", \"success\");\n      }\n      document.body.style.color = \"white\"\n    }\n  };\n\n  const showalert = (message, type) => {\n    setAlert({\n      message: message,\n      type: type\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 1400);\n  }\n\n  return (\n    <>\n      <Navbar toggleMode={toggleMode} mode={darkmode} />\n      <Alert alert={alert} />\n      <Textfunctions mode={darkmode} showalert={showalert} />\n    </>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}